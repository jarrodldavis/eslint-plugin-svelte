"use strict";

const { TOKEN_TYPES: LEXER_TOKEN_TYPES } = require("./template-lexer");

const ESPREE_TOKEN_TYPES = {
  Identifier: "Identifier",
  Keyword: "Keyword",
  Punctuator: "Punctuator",
  String: "String"
};

const SKIP_AUTO_PUSH = "skip_auto_push";

const TOKEN_MAPPINGS = {
  [LEXER_TOKEN_TYPES.HTML_OPEN_START]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.ATTRIBUTE_NAME]: ESPREE_TOKEN_TYPES.String,
  [LEXER_TOKEN_TYPES.DIRECTIVE_COLON]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.DIRECTIVE_IDENTIFIER]: SKIP_AUTO_PUSH,
  [LEXER_TOKEN_TYPES.DIRECTIVE_PIPE]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.DIRECTIVE_MODIFIER]: ESPREE_TOKEN_TYPES.String,
  [LEXER_TOKEN_TYPES.ATTRIBUTE_EQUAL]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.ATTRIBUTE_VALUE]: ESPREE_TOKEN_TYPES.String,
  [LEXER_TOKEN_TYPES.ATTRIBUTE_DOUBLE_QUOTE]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.ATTRIBUTE_SINGLE_QUOTE]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.HTML_OPEN_END]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.HTML_CLOSE_START]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.HTML_CLOSE_END]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.MUSTACHE_START]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.MUSTACHE_END]: ESPREE_TOKEN_TYPES.Punctuator,

  [LEXER_TOKEN_TYPES.IF_OPEN]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.ELSE_OPEN]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.ELSE_IF]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.IF_CLOSE]: ESPREE_TOKEN_TYPES.Keyword,

  [LEXER_TOKEN_TYPES.EACH_OPEN]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.EACH_AS]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.EACH_COMMA]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.EACH_INDEX_IDENTIFIER]: ESPREE_TOKEN_TYPES.Identifier,
  [LEXER_TOKEN_TYPES.EACH_KEY_START]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.EACH_KEY_END]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.EACH_KEY_AMPERSAT]: ESPREE_TOKEN_TYPES.Punctuator,
  [LEXER_TOKEN_TYPES.EACH_KEY_IDENTIFIER]: ESPREE_TOKEN_TYPES.Identifier,
  [LEXER_TOKEN_TYPES.EACH_CLOSE]: ESPREE_TOKEN_TYPES.Keyword,

  [LEXER_TOKEN_TYPES.AWAIT_OPEN]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.AWAIT_COMPACT_THEN]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.AWAIT_FULL_THEN]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.AWAIT_THEN_IDENTIFIER]: ESPREE_TOKEN_TYPES.Identifier,
  [LEXER_TOKEN_TYPES.AWAIT_CATCH]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.AWAIT_CATCH_IDENTIFIER]: ESPREE_TOKEN_TYPES.Identifier,
  [LEXER_TOKEN_TYPES.AWAIT_CLOSE]: ESPREE_TOKEN_TYPES.Keyword,

  [LEXER_TOKEN_TYPES.RAW_HTML_START]: ESPREE_TOKEN_TYPES.Keyword,
  [LEXER_TOKEN_TYPES.DEBUG_START]: ESPREE_TOKEN_TYPES.Keyword
};

const IDENTIFIERS = {
  [LEXER_TOKEN_TYPES.DIRECTIVE_IDENTIFIER]: {
    start: LEXER_TOKEN_TYPES.ATTRIBUTE_NAME,
    end: LEXER_TOKEN_TYPES.DIRECTIVE_IDENTIFIER
  },
  [LEXER_TOKEN_TYPES.EACH_INDEX_IDENTIFIER]: {
    start: LEXER_TOKEN_TYPES.MUSTACHE_START,
    end: LEXER_TOKEN_TYPES.MUSTACHE_END
  },
  [LEXER_TOKEN_TYPES.EACH_KEY_IDENTIFIER]: {
    start: LEXER_TOKEN_TYPES.MUSTACHE_START,
    end: LEXER_TOKEN_TYPES.MUSTACHE_END
  },
  [LEXER_TOKEN_TYPES.AWAIT_THEN_IDENTIFIER]: {
    start: LEXER_TOKEN_TYPES.MUSTACHE_START,
    end: LEXER_TOKEN_TYPES.MUSTACHE_END
  },
  [LEXER_TOKEN_TYPES.AWAIT_CATCH_IDENTIFIER]: {
    start: LEXER_TOKEN_TYPES.MUSTACHE_START,
    end: LEXER_TOKEN_TYPES.MUSTACHE_END
  }
};

module.exports = {
  ESPREE_TOKEN_TYPES,
  SKIP_AUTO_PUSH,
  TOKEN_MAPPINGS,
  IDENTIFIERS
};
